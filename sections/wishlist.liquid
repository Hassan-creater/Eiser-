<!-- UMD/CDN build: has initTree() builtâ€‘in -->


<div class=" max-w-[1440px] mx-auto w-full  ">
  {% render  'page' , title : section.settings.title %}
    
    
    <div id="list_container" class="w-full p-[0.5em]  lg:px-[5em] py-[2em]  mt-[3em] flex flex-wrap justify-evenly sm:gap-4 ">
      
    </div>

   

</div>


<script>
class Wishlist {
  constructor(listContainerSelector) {
    this.listContainer = document.querySelector(listContainerSelector);
    this.bindEvents();
    this.showProducts();
    this.container();
  }

  container(){
    let list = this.getList();
    
    if(list.length == 0){
      this.listContainer.innerHTML = `<div class="w-full flex flex-col items-center gap-3 mb-[5em]"><p class="text-2xl text-center w-full mt-[4em] ">Your list is empty<p>
      <a href="/collections/all" class="text-[1.1em] text-center w-full border-[1px] border-lime-500 px-[1em] py-[0.4em] rounded-sm bg-lime-500 hover:text-lime-500 text-white hover:bg-transparent duration-300  mb-[5em]">Continue Shopping<a></div>` 
    }
    
  }
  
  // Retrieve wishlist from localStorage (an array of product handles)
  getList() {
    const wishlist = localStorage.getItem('wishlist');
    return wishlist ? JSON.parse(wishlist) : [];
  }

  // Fetch product data using its handle
  async fetchProduct(handle) {
    try {
      const res = await fetch(`/products/${handle}.js`);
      if (!res.ok) throw new Error('Network response was not ok');
      return await res.json();
    } catch (error) {
      console.error(`Error fetching product ${handle}:`, error);
      return null;
    }
  }

   showProduct(data) {
  const container = document.querySelector('.quick_view_container');
  const mainImage = data.images?.[0] || '';
  const thumbnails = (data.images?.length >= 0)
    ? data.images.slice(0).map((src, i) => `
      <div slide-val=""${i} class="  w-[4em] h-[4em] hover:bg-red-400 border-[1px] border-slate-400 rounded-sm overflow-hidden">
        <img src="${src}" alt="Thumb ${i + 1}" class="quick_view_images w-full h-full object-cover" />
      </div>`).join('')
    : '';

  const paragraphs = data.description.split('\n');

  

  // Build option selectors
  const optionsHtml = data.options.map((opt, idx) => `
    <div class="my-3">
      <label for="option-${idx}" class="block text-sm font-medium text-gray-700">${opt.name}</label>
      <select id="option-${idx}" name="option-${idx}" class="w-full border px-3 py-2 mt-1">
        ${opt.values.map(val => `<option value="${val}">${val}</option>`).join('')}
      </select>
    </div>
  `).join('');

  // Inject markup
  container.innerHTML = `
    <div x-on:click="quick_view = false" class="absolute right-[1em] z-50 top-[1em] p-[0.5em] cursor-pointer">
      <p class="text-[1.5em]">X</p>
    </div>
    <div class="w-full lg:px-[5em] mx-auto my-8  ">
      <div class="flex justify-between lg:flex-row flex-col  gap-[2em] items-center">

        <!-- Media Section -->
        <div class="product--medias w-full sm:w-[80%] lg:w-1/2">
          <div class="relative ">
            <div class="  w-full h-[35em] overflow-x-hidden">
              <img src="${mainImage}" alt="${data.title}" class=" quick_view_frame w-full h-full object-cover" />
            </div>
            ${thumbnails ? `
              <div class="w-full p-[1em] bottom-[2em] right-0 absolute flex justify-end items-center gap-2">
                ${thumbnails}
              </div>` : ''}
          </div>
        </div>

        <!-- Information Section -->
        <div class="w-full sm:w-[80%] lg:w-1/2 product--information sticky top-5 px-[0.5em] py-2 sm:pl-[3em]">
          <form method="post" action="/cart/add.js" class="add-to-cart-form" novalidate>
            <input type="hidden" name="id" id="selected-variant-id" value="${data.variants[0].id}">

            <div class="my-3"><span class="text-xs text-gray-500">${data.vendor}</span></div>
            <div class="my-3"><h1 class="text-[24px] roboto text-gray-900">${data.title}</h1></div>
            <div class="my-3" id="price-section">
              ${data.compare_at_price ? `<span class="text-base text-gray-500 line-through" id="compare-price">Rs:${(data.compare_at_price / 100).toFixed(2)}</span>` : ''}
              <span class="text-[24px] text-green-500" id="current-price">Rs: ${(data.price/100).toFixed(2)}</span>
            </div>

            <!-- Variant Options -->
            <div id="variant-options">
              ${optionsHtml}
            </div>

            <!-- Quantity -->
            <div class="my-3">
              <label for="Quantity">Quantity</label>
              <div class="my-2">
                <input type="number" name="quantity" id="Quantity" value="1" min="1" class="w-full border px-3 py-3">
              </div>
            </div>

            <div class="my-[3em]"><p class="text-gray-700">${paragraphs[0]}</p></div>

            <!-- Add to Cart Button -->
            <div class="my-3 flex gap-[2em] items-center">
              <button type="submit" class="add-to-cart-button w-[10em] px-6 py-2 bg-lime-500 border-[1px] border-lime-500 text-white hover:bg-transparent duration-300 hover:text-lime-500 rounded-sm my-2" id="add-to-cart-btn">
                Add to cart
              </button>

              <div class="px-[0.6em] py-2 bg-[#F6F6F6] flex justify-center items-center rounded-sm hover:shadow-lg shadow-slate-400 duration-300">
                <i class="fa-regular fa-gem"></i>
              </div>

              <div class="wishlist px-[0.6em] py-2 bg-[#F6F6F6] flex justify-center items-center rounded-sm hover:shadow-lg shadow-slate-400 duration-300 cursor-pointer" data-product-handle="${data.handle}">
                <i class="fa-regular fa-heart"></i>
              </div>
            </div>
          </form>
        </div>

      </div>
    </div>
  `;


  function slider(){
    const images = document.querySelectorAll(".quick_view_images");
  const frame = document.querySelector(".quick_view_frame");
  
  images.forEach((img)=>{
    img.addEventListener("click",function(){
       
       frame.src = img.src;
      
      
      
    })
  })
  }

  slider();
  
  



 

  // Function to update variant based on selected options
  function updateVariant() {
    const selected = data.options.map((opt, idx) => document.getElementById(`option-${idx}`).value);
    const match = data.variants.find(v =>
      v.options.every((val, i) => val === selected[i])
    ) || data.variants[0];

    // Update hidden input and price display
    document.getElementById('selected-variant-id').value = match.id;
    document.getElementById('current-price').textContent = `Rs: ${match.price}`;
    if (match.compare_at_price) {
      document.getElementById('compare-price').textContent = `Rs: ${match.compare_at_price}`;
      document.getElementById('compare-price').classList.remove('hidden');
    } else {
      document.getElementById('compare-price').classList.add('hidden');
    }
    // Disable button if unavailable
    document.getElementById('add-to-cart-btn').disabled = !match.available;
  }

  // Attach change listeners to selectors
  data.options.forEach((_, idx) => {
    document.getElementById(`option-${idx}`).addEventListener('change', updateVariant);
  });

  // Initial binding
 
}


  async getProduct(handle) {
  try {
    const res = await fetch(`/products/${handle}.js`);
    const data = await res.json();
    this.showProduct(data);
    
    
    
    
  } catch (err) {
    console.error('Fetch product failed:', err);
  }
}



  // Create a product card element with full HTML and include all functionalities
  createProductCard(product) {
    const div = document.createElement('div');
    // You can add a "product-card" class here in addition to your responsive utility classes
    div.className = 'product-card  p-1 group w-[300px]';
    
    div.innerHTML = `
      <div class="w-full h-[347px] bg-[#F0F2F1] relative flex justify-center items-center overflow-hidden">
        <a class="w-full h-full" href="${product.url}">
          ${
            product.images.length > 0
              ? `<img src="${product.images[0]}" alt="${product.title}" class="object-center object-cover w-full h-full">`
              : `<svg class="placeholder">...</svg>`
          }
        </a>
        <div class="w-[90%] p-[0.5em] bg-[rgba(113,205,20,0.55)] absolute bottom-0 flex justify-evenly items-center translate-y-[5em] group-hover:-translate-y-[0em] duration-500">
          <div  quick-view="${ product.handle }" x-on:click=" quick_view = true" class="quick_view flex p-[0.6em] justify-center items-center rounded-full bg-white hover:bg-green-500 hover:text-white duration-300"><i class="fa-solid fa-eye text-[1em]"></i></div>
          <div data-product-handle="${product.handle}" class="wishlist flex p-[0.6em] justify-center items-center rounded-full bg-white hover:bg-green-500 text-red-400 hover:text-red-500 duration-300">
            <i class="fa-solid fa-heart"></i>
          </div>

          <form class="add-to-cart-form" data-product-id="${product.variants[0].id}">
            <input type="hidden" name="id" value="${product.variants[0].id}">
            <button type="submit" class="add-to-cart-button flex p-[0.6em] justify-center items-center rounded-full bg-white hover:bg-green-500 hover:text-white duration-300 cursor-pointer">
              <i class="fa-solid fa-cart-shopping"></i>
            </button>
          </form>
          
        </div>
      </div>
      <div class="w-full h-[99px] border-[1px] border-slate-300 p-[1.5em] flex flex-col justify-center gap-[0.5em]">
        <p class="text-[14px] roboto group-hover:text-green-500 duration-300">${product.title}</p>
        <div class="w-full flex gap-[1.3em] items-center">
          <p class="text-[20px] roboto">Rs: ${(product.price/100).toFixed(2)}</p>
        </div>
      </div>

      
    `;





   
   let view = div.querySelector(".quick_view");
   view.addEventListener("click",()=>{
    let handle = view.getAttribute("quick-view");
    console.log(handle);
    this.getProduct(handle);

    
     
    
    
   })


   

    return div;
  }


 



  

  // Fetch all products from the wishlist and append them to the container
  async showProducts() {
    const list = this.getList();
    this.listContainer.innerHTML = ''; // Clear previous content

    // Fetch products in parallel
    const fetchPromises = list.map(handle => this.fetchProduct(handle));
    const products = await Promise.all(fetchPromises);

    products.forEach(product => {
      if (product) {
        const productCard = this.createProductCard(product);
        this.listContainer.appendChild(productCard);
      }
    });
  }

  
  

  // Attach event listeners using event delegation
  bindEvents() {
    // Handle add-to-cart form submission events
    this.listContainer.addEventListener('submit', async (e) => {
      if (e.target && e.target.matches('.add-to-cart-form')) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const addButton = form.querySelector('.add-to-cart-button');

        // Store original button innerHTML
        const originalHTML = addButton.innerHTML;
        addButton.disabled = true;
        addButton.innerHTML = '<div class="spinner"></div>';

        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(formData).toString()
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          // Update cart counters after successful addition
          const data = await response.json();
          const cartUpdate = await fetch('/cart.js');
          const cartData = await cartUpdate.json();
          const cartCounters = document.querySelectorAll('#cart-count');
          cartCounters.forEach(span => {
            span.textContent = cartData.item_count;
          });

        } catch (error) {
          console.error('Add to cart failed:', error);
          alert(`Could not add item: ${error.message}`);
        } finally {
          addButton.disabled = false;
          addButton.innerHTML = originalHTML;
        }
      }
    });

    // Handle heart icon click to remove product from wishlist
    this.listContainer.addEventListener('click', (e) => {
      const heartEl = e.target.closest('.wishlist');
      if (heartEl) {
        const productHandle = heartEl.getAttribute('data-product-handle');
        if (!productHandle) return;

        // Remove the product handle from the wishlist array
        let wishlist = this.getList();
        wishlist = wishlist.filter(handle => handle !== productHandle);
        localStorage.setItem('wishlist', JSON.stringify(wishlist));

       

        // Remove the corresponding product card from the DOM
        const productCard = heartEl.closest('.product-card');
        if (productCard) {
          productCard.remove();

          let list = this.getList();
          let count = document.querySelector('.wish_count');
          if(list.length != 0){
            count.textContent = list.length;
          }else{
            count.textContent = '';
            this.container();
          }
          
        }
      }
    });
  }
}

// Initialize the Wishlist class when the DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  new Wishlist('#list_container');
});

   








     
     

  

  
  

</script>


{% schema %}
{
    "name": "Wishlist",
    "settings": [
          {
            "type": "text",
             "id": "title",
             "default" : "Your Wishlist",
             "label": "Title"
          }
        ]
}
{% endschema %}